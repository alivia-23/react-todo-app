{"version":3,"sources":["Human-go-down.svg","Human-go-up.svg","spinner.svg","services.js","statusMessages.js","Login.jsx","ThemeContext.js","Logout.jsx","todoReducer.js","Todo.jsx","Todos.jsx","AddTodo.jsx","AppTitle.jsx","Themes.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","convertNetworkError","err","message","convertServiceError","Promise","reject","fetchReadAllTasks","username","fetch","method","catch","then","response","ok","json","fetchUpdateOneTask","taskId","task","headers","Headers","body","JSON","stringify","statusMessages","DEFAULT","USERNAME_REQUIRED","NETWORK_ERROR","LOGIN_REQUIRED","LOGIN_UNAUTHORIZED","EMPTY_TASKNAME","Login","onLogin","useState","setUsername","isLoading","setIsLoading","error","setError","className","onChange","e","target","value","alt","src","spinner","onClick","trim","fetchCreateSession","ThemeContext","React","createContext","default","Logout","user","onLogout","useContext","theme","themes","buttonStyle","refreshTheme","todoReducer","todos","action","type","sort","task1","task2","taskName","toUpperCase","done","Object","values","filter","todo","Todo","content","index","refreshTodos","onError","edit","setEdit","editError","setEditError","setTaskName","prevTaskName","setPrevTaskName","deleteTodo","fetchRemoveOneTask","deletedTodo","newTodos","findTodo","newTodo","updatedTodo","changeTodoTaskName","key","checked","changeTodoStatus","Todos","filterDone","setFilterDone","refreshOriginalTodos","selected","filterTodos","ascSortIcon","descSortIcon","map","AddTodo","onAddSuccess","onAddError","text","setText","addTodo","placeholder","AppTitle","Themes","changeTheme","fetchUpdateTheme","App","isLoggedIn","userState","setUserState","setTodos","light","bodyBackground","dark","colorful","getValidTheme","keys","includes","useEffect","userInfo","setBodyColor","document","style","backgroundColor","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.1be366f8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Human-go-down.bc058c7d.svg\";","module.exports = __webpack_public_path__ + \"static/media/Human-go-up.705e49c4.svg\";","module.exports = __webpack_public_path__ + \"static/media/spinner.414a23f5.svg\";","const convertNetworkError = (err) => {\r\n  return {\r\n    message: 'NETWORK-ERROR',\r\n    err\r\n  };\r\n};\r\n\r\nconst convertServiceError = (err) => Promise.reject(err);\r\n\r\nexport const fetchGetSession = (username) => {\r\n  return fetch('/session', {\r\n    method: 'GET',\r\n  })\r\n  .catch( convertNetworkError )\r\n  .then( response => {\r\n    if(!response.ok) {\r\n      return response.json().then(convertServiceError);\r\n    }\r\n    return response.json();\r\n  });\r\n};\r\n\r\nexport const fetchCreateSession = (username) => {\r\n  return fetch('/session', {\r\n    method: 'POST',\r\n    headers: new Headers({\r\n      'content-type': 'application/json',\r\n    }),\r\n    body: JSON.stringify({ username }),\r\n  })\r\n  .catch( convertNetworkError )\r\n  .then( response => {\r\n    if(!response.ok) {\r\n      return response.json().then( convertServiceError );\r\n    }\r\n    return response.json();\r\n  });\r\n};\r\n\r\nexport const fetchRemoveSession = () => {\r\n  return fetch('/session', {\r\n    method: 'DELETE',\r\n  })\r\n  .catch( convertNetworkError)\r\n  .then( response => {\r\n    return response.ok;\r\n  });\r\n};\r\n\r\nexport const fetchReadTheme = (username) => {\r\n  return fetch(`/theme/${username}`, {\r\n    method: 'GET'\r\n  })\r\n  .catch( convertNetworkError )\r\n  .then( response => {\r\n    if(!response.ok) {\r\n      return response.json().then( convertServiceError );\r\n    }\r\n    return response.json();\r\n  });\r\n};\r\n\r\nexport const fetchUpdateTheme = (username, theme) => {\r\n  return fetch(`/theme/${username}`, {\r\n    method: 'PUT',\r\n    headers: new Headers({\r\n      'content-type': 'application/json',\r\n    }),\r\n    body: JSON.stringify({ theme })\r\n  })\r\n  .catch( convertNetworkError )\r\n  .then( response => {\r\n    if(!response.ok) {\r\n      return response.json().then( convertServiceError );\r\n    }\r\n    return response.json();\r\n  });\r\n};\r\n\r\nexport const fetchReadAllTasks = (username) => {\r\n  return fetch(`/tasks/${username}`, {\r\n    method: 'GET',\r\n  })\r\n  .catch( convertNetworkError )\r\n  .then( response => {\r\n    if(!response.ok) {\r\n      return response.json().then(convertServiceError);\r\n    }\r\n    return response.json();\r\n  });\r\n};\r\n\r\nexport const fetchAddOneTask = (username, taskName) => {\r\n  return fetch(`/tasks/${username}`, {\r\n    method: 'POST',\r\n    headers: new Headers({\r\n      'content-type': 'application/json',\r\n    }),\r\n    body: JSON.stringify({ task: {taskName, done: false} }),\r\n  })\r\n  .catch( convertNetworkError )\r\n  .then( response => {\r\n    if(!response.ok) {\r\n      return response.json().then(convertServiceError);\r\n    }\r\n    return response.json();\r\n  });\r\n};\r\n\r\nexport const fetchUpdateOneTask = (username, taskId, task) => {\r\n  return fetch(`/tasks/${username}/${taskId}`, {\r\n    method: 'PUT',\r\n    headers: new Headers({\r\n      'content-type': 'application/json',\r\n    }),\r\n    body: JSON.stringify({task: task})\r\n  })\r\n  .catch( convertNetworkError )\r\n  .then( response => {\r\n    if(!response.ok) {\r\n      return response.json().then(convertServiceError);\r\n    }\r\n    return response.json();\r\n  });\r\n};\r\n\r\nexport const fetchRemoveOneTask = (username, taskId) => {\r\n  return fetch(`/tasks/${username}/${taskId}`, {\r\n    method: 'DELETE',\r\n  })\r\n  .catch( convertNetworkError )\r\n  .then( response => {\r\n    if(!response.ok) {\r\n      return response.json().then(convertServiceError);\r\n    }\r\n    return response.json();\r\n  });\r\n};\r\n","const statusMessages = {\r\n  DEFAULT: 'Oh no!  Something went wrong, please try again',\r\n  USERNAME_REQUIRED: 'Username is required',\r\n  NETWORK_ERROR: 'There was a problem reaching your network, please try again',\r\n  LOGIN_REQUIRED: 'You must be logged in to view this content',\r\n  LOGIN_UNAUTHORIZED: 'You are not permitted to view this content',\r\n  EMPTY_TASKNAME: 'Taskname cannot be empty',\r\n  'login denied': 'Username must be between 2-20 chracters and start with [A-Za-z0-9_-]',\r\n  'no valid session' : 'Your session is not valid',\r\n  'action not permitted' :  'This action is not permitted',\r\n  'no tasks for user' : 'There is no such task' ,\r\n  'no such taskId' : 'Invalid taskId',\r\n  'failed to update' : 'Update failed',\r\n};\r\n\r\nexport default statusMessages;\r\n","import React, { useState } from 'react';\r\nimport { fetchCreateSession } from './services';\r\nimport statusMessages from './statusMessages';\r\nimport spinner from './spinner.svg';\r\n\r\nconst Login = ({ onLogin }) => {\r\n\r\n  const [username, setUsername] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  const performLogin = () => {\r\n    if(!username || username.trim() === \"\") {\r\n      setError(statusMessages['login denied']);\r\n      return;\r\n    }\r\n    setError('');\r\n    setIsLoading(true);\r\n    fetchCreateSession(username)\r\n    .then( (response) => {\r\n      setError('');\r\n      onLogin(response['data']); // inform parent\r\n    })\r\n    .catch( (err) => {\r\n      setError(statusMessages[err.message || 'DEFAULT']);\r\n      setIsLoading(false);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"login\">\r\n      <p className=\"error\">{error}</p>\r\n      <div>\r\n      <input onChange={ (e) => setUsername(e.target.value) }/>\r\n      { isLoading ?\r\n          <img alt=\"spinner\" src={spinner}/> :\r\n          <button onClick={ performLogin }>Login</button>\r\n      }\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n};\r\n\r\nexport default Login;\r\n","import React from 'react';\n\nconst ThemeContext = React.createContext({\n  default: 'To be overriden'\n});\n\nexport default ThemeContext;\n","import React, {useContext} from 'react';\r\nimport ThemeContext from './ThemeContext';\r\nimport { fetchRemoveSession } from './services';\r\n\r\nconst Logout = ({ user, onLogout }) => {\r\n  const { theme, themes, refreshTheme } = useContext(ThemeContext);\r\n  const buttonStyle = themes[theme]['buttonStyle'];\r\n\r\n  const logout = () => {\r\n    fetchRemoveSession()\r\n    .then( () => onLogout() )\r\n    .catch((err) => {\r\n\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className='logout'>\r\n      <span className=\"user-name\" > {user.username} </span>\r\n      <span> <button className={buttonStyle} onClick={logout}> Logout </button></span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Logout;\r\n","import { fetchReadAllTasks} from './services';\n\nfunction todoReducer(todos, action)  {\n  switch(action.type) {\n    case 'sortByNameAsc':\n        return [...todos].sort(function(task1, task2) {\n            var taskName1 = task1.taskName.toUpperCase();\n            var taskName2 = task2.taskName.toUpperCase();\n            if (taskName1 <= taskName2) {\n              return -1;\n            } else {\n              return 1;\n            }\n        });\n    case 'sortByNameDesc':\n        return [...todos].sort(function(task1, task2) {\n            var taskName1 = task1.taskName.toUpperCase();\n            var taskName2 = task2.taskName.toUpperCase();\n            if (taskName1 > taskName2) {\n              return -1;\n            } else {\n              return 1;\n            }\n        });\n    case 'sortByNotDoneFirst':\n        return [...todos].sort(function(task1, task2) {\n            if(task1.done === task2.done) {\n              return 0;\n            } else if(!task1.done) {\n              return -1;\n            } else {\n              return 1;\n            }\n        });\n    case 'sortByDoneFirst':\n        return [...todos].sort(function(task1, task2) {\n            if(task1.done === task2.done) {\n              return 0;\n            } else if(task1.done) {\n              return -1;\n            } else {\n              return 1;\n            }\n        });\n    case 'refreshOriginalTodos':\n        fetchReadAllTasks(action.username)\n        .then( response => {\n          return Object.values(response['data']);\n        })\n        .catch( (err) => {\n\n        });\n    case 'filterOutDone':\n        const filteredTodos = [...todos].filter( todo => !todo.done);\n        return filteredTodos;\n    default:\n      return todos;\n  }\n};\n\nexport default todoReducer;\n","import React, {useReducer, useState, useContext} from 'react';\nimport { fetchRemoveOneTask, fetchUpdateOneTask } from './services';\nimport ThemeContext from './ThemeContext';\nimport statusMessages from './statusMessages';\n\nconst Todo = ({ user, todos, todo, index, refreshTodos, onError }) => {\n  const { theme, themes, refreshTheme } = useContext(ThemeContext);\n  const buttonStyle = themes[theme]['buttonStyle'];\n  const [edit, setEdit] = useState(false);\n  const [editError, setEditError] = useState(\"\");\n  const [taskName, setTaskName] = useState(todo.taskName);\n  const [prevTaskName, setPrevTaskName] = useState(todo.taskName);\n\n  const deleteTodo = (taskId) => {\n    fetchRemoveOneTask(user.username, taskId)\n    .then( (response) => {\n      const deletedTodo = response['data'];\n      const newTodos = todos.filter(todo => todo.taskId !== deletedTodo.taskId);\n      refreshTodos([...newTodos]);\n    })\n    .catch( (err) => {\n       onError(statusMessages[err.message || 'DEFAULT']);\n     })\n  };\n\n  const changeTodoStatus = (taskId, index) => {\n     const todo = findTodo(taskId);\n     const newTodo = {...todo, done: !todo.done};\n     fetchUpdateOneTask(user.username, taskId, newTodo)\n     .then( (response) => {\n         const updatedTodo = response['data'];\n         todos[index] = updatedTodo;\n         refreshTodos([...todos]);\n     })\n     .catch( (err) => {\n         onError(statusMessages[err.message || 'DEFAULT']);\n     })\n  };\n\n   const changeTodoTaskName = (taskId) => {\n      const todo = findTodo(taskId);\n      const newTodo = {...todo, taskName: taskName};\n      if(!taskName || taskName.trim() === \"\") {\n         setEditError(statusMessages['EMPTY_TASKNAME']);\n         return;\n      }\n      setEditError(\"\");\n      fetchUpdateOneTask(user.username, taskId, newTodo)\n      .then( (response) => {\n        setEdit(false);\n        const updatedTodo = response['data'];\n        todos[index] = updatedTodo;\n        refreshTodos([...todos]);\n      })\n      .catch( (err) => {\n        onError(statusMessages[err.message || 'DEFAULT']);\n      })\n   };\n\n    const findTodo = (taskId) => {\n       return todos.filter(todo => todo.taskId === taskId)[0];\n    };\n\n    const onCancel = () => {\n      setEdit(false);\n      setTaskName(prevTaskName)\n      setEditError(\"\");\n    }\n\n    const onEdit = () => {\n      setEdit(true);\n      setPrevTaskName(taskName);\n    }\n\n    let content;\n    if(edit) {\n      content =\n        <>\n          <span><input type=\"text\" className=\"todo-name\" value={taskName} onChange={ (e) => setTaskName(e.target.value) } /></span>\n          <span><button className={buttonStyle} onClick={ () => changeTodoTaskName(todo.taskId)} >Save</button></span>\n          <span><button className={buttonStyle} onClick={ () => onCancel()} >Cancel</button></span>\n        </>\n    } else {\n        content =\n          <>\n            <span className={ todo.done? \"todo-name-complete\": \"todo-name\"}> {todo.taskName} </span>\n            <span><button className={buttonStyle} onClick={ () => onEdit() }>Edit</button> </span>\n          </>\n    }\n\n  return (\n    <li key={todo.taskId} className=\"todo-row\">\n      <div className=\"edit-error\">\n          {editError}\n      </div>\n      <div className=\"todo\">\n        <span><input className=\"todo-done\" type=\"checkbox\" checked={todo.done} onChange={ e => changeTodoStatus(todo.taskId, index) } /></span>\n          {content}\n        <span ><button className=\"delete-todo\" onClick={ e => deleteTodo(todo.taskId) }>X</button> </span>\n      </div>\n    </li>\n  );\n}\n\nexport default Todo;\n","import React, {useState, useContext} from 'react';\r\nimport descSortIcon from './Human-go-down.svg';\r\nimport ascSortIcon from './Human-go-up.svg';\r\nimport todoReducer from './todoReducer'\r\nimport Todo from './Todo'\r\nimport ThemeContext from './ThemeContext';\r\nimport { fetchReadAllTasks } from './services';\r\nimport statusMessages from './statusMessages';\r\n\r\nconst Todos = ({ user, todos, refreshTodos, onError }) => {\r\n\r\n  const [searchName, setSearchName] = useState(\"\");\r\n  const [filterDone, setFilterDone] = useState(false);\r\n  const { theme, themes, refreshTheme } = useContext(ThemeContext);\r\n  const buttonStyle = themes[theme]['buttonStyle'];\r\n\r\n  const sortByNameAsc = () => {\r\n      const newTodos = todoReducer(\r\n          todos,\r\n          {\r\n            type: 'sortByNameAsc'\r\n          }\r\n      );\r\n      refreshTodos(newTodos);\r\n  };\r\n\r\n  const sortByNameDesc = () => {\r\n      const newTodos = todoReducer(\r\n          todos,\r\n            {\r\n              type: 'sortByNameDesc'\r\n            }\r\n      );\r\n      refreshTodos(newTodos);\r\n  };\r\n\r\n  const sortByNotDoneFirst = () => {\r\n      const newTodos = todoReducer(\r\n        todos,\r\n        {\r\n          type: 'sortByNotDoneFirst'\r\n        }\r\n      );\r\n      refreshTodos(newTodos);\r\n  };\r\n\r\n  const sortByDoneFirst = () => {\r\n      const newTodos = todoReducer(\r\n        todos,\r\n        {\r\n          type: 'sortByDoneFirst'\r\n        }\r\n      );\r\n      refreshTodos(newTodos);\r\n  };\r\n\r\n  const refreshOriginalTodos = () => {\r\n      fetchReadAllTasks(user.username)\r\n      .then( response => {\r\n        refreshTodos(Object.values(response['data']));\r\n      })\r\n      .catch( (err) => {\r\n         onError(statusMessages[err.message]);\r\n      });\r\n   };\r\n\r\n  const filterTodos = (selected) => {\r\n      if(selected) {\r\n          const newTodos = todoReducer(\r\n             todos,\r\n              {\r\n                type: 'filterOutDone'\r\n              }\r\n           );\r\n          setFilterDone(true);\r\n          refreshTodos(newTodos);\r\n      } else {\r\n          setFilterDone(false);\r\n          refreshOriginalTodos();\r\n      }\r\n  };\r\n\r\n  return (\r\n    <div className=\"todo-content\">\r\n        <div>\r\n           <span ><button className={buttonStyle} onClick={ e => refreshOriginalTodos() }>Refresh</button></span>\r\n        </div>\r\n        <br/>\r\n        <div>\r\n          <span>\r\n             Filter out completed tasks<input className=\"filter-todos\" type=\"checkbox\" onChange={ e => filterTodos(e.target.checked)} />\r\n          </span>\r\n        </div>\r\n        <br/>\r\n        <div>\r\n          <div className=\"todo-done-header\">\r\n            <div>\r\n              <span>Done</span>\r\n              <span><img className=\"asc-sort-icon\" alt=\"asc-sort-icon\" src={ascSortIcon} onClick={sortByNotDoneFirst} /></span>\r\n              <span><img className=\"desc-sort-icon\" alt=\"desc-sort-icon\" src={descSortIcon} onClick={sortByDoneFirst} /></span>\r\n            </div>\r\n          </div>\r\n          <div className=\"todo-name-header\">\r\n            <div>\r\n              <span>Name</span>\r\n              <span><img className=\"asc-sort-icon\" alt=\"asc-sort-icon\" src={ascSortIcon} onClick={sortByNameAsc} /></span>\r\n              <span><img className=\"desc-sort-icon\" alt=\"desc-sort-icon\" src={descSortIcon} onClick={sortByNameDesc} /></span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n         <ul className=\"todos\">\r\n         {\r\n           todos.map( (todo, index) => (\r\n                (filterDone && !todo.done) || (!filterDone) ?\r\n                 <Todo key={todo.taskId} user={user} todos={todos} todo={todo} index={index} refreshTodos={refreshTodos} onError={onError} /> : ''\r\n           ))\r\n         }\r\n         </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Todos;\r\n","import React, { useState, useContext } from 'react';\r\nimport { fetchAddOneTask } from './services';\r\nimport ThemeContext from './ThemeContext';\r\nimport statusMessages from './statusMessages';\r\n\r\nconst AddTodo = ({ user, onAddSuccess, onAddError}) => {\r\n   const { theme, themes, refreshTheme } = useContext(ThemeContext);\r\n   const buttonStyle = themes[theme]['buttonStyle'];\r\n   const [text, setText] = useState(\"\");\r\n\r\n   const addTodo = (text) => {\r\n     if(!text || text.trim() === \"\") {\r\n       onAddError(statusMessages['EMPTY_TASKNAME']);\r\n       return;\r\n     }\r\n\r\n     fetchAddOneTask(user.username, text)\r\n     .then( (response) => {\r\n       setText(\"\");\r\n       onAddSuccess(response['data']);\r\n     })\r\n     .catch( (err) => {\r\n       onAddError(statusMessages[err.message || 'DEFAULT']);\r\n     })\r\n   }\r\n   return (\r\n    <div className=\"add-message\">\r\n        <input className=\"to-add\" type=\"text\" value={text} placeholder=\"Enter your text\" onChange={ e => setText(e.target.value) } />\r\n        <button className={buttonStyle} onClick={ () => addTodo(text) } >Add</button>\r\n    </div>\r\n  );\r\n}\r\nexport default AddTodo;\r\n","import React from 'react';\n\nconst AppTitle = () => {\n  return (\n    <div className=\"app-title\">\n      <h1> Todo App </h1>\n    </div>\n  );\n};\n\nexport default AppTitle;\n","import React, {useContext} from 'react';\nimport { fetchUpdateTheme } from './services';\nimport ThemeContext from './ThemeContext';\nimport statusMessages from './statusMessages';\n\nconst Themes = ({user, onError}) => {\n\n  const { theme, refreshTheme } = useContext(ThemeContext);\n  const changeTheme = (value) => {\n     fetchUpdateTheme(user.username, value)\n     .then( () => {\n        refreshTheme(value);\n     })\n     .catch( (err) => {\n       onError(statusMessages[err.message || 'DEFAULT']);\n     })\n  }\n\n  return (\n    <div className=\"themes\">\n      Theme:\n      <select className=\"themes-select\" value={user.theme} onChange={ e => changeTheme(e.target.value) }>\n        <option value=\"light\">light</option>\n        <option value=\"dark\">dark</option>\n        <option value=\"colorful\">colorful</option>\n      </select>\n    </div>\n  );\n};\n\nexport default Themes;\n","import React, { useState, useEffect} from 'react';\r\nimport { fetchGetSession, fetchReadAllTasks } from './services';\r\nimport statusMessages from './statusMessages';\r\nimport './todo.css';\r\nimport Login from './Login';\r\nimport Logout from './Logout';\r\nimport Todos from './Todos';\r\nimport AddTodo from './AddTodo';\r\nimport AppTitle from './AppTitle';\r\nimport Themes from './Themes'\r\nimport ThemeContext from './ThemeContext'\r\n\r\n\r\nfunction App() {\r\n\r\n  const defaultTheme = 'light';\r\n  const [userState, setUserState] = useState({ isLoggedIn: false, theme: defaultTheme });\r\n  const [users, setUsers] = useState([]);\r\n  const [todos, setTodos] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const themes = {\r\n    light: {\r\n      buttonStyle: 'light-theme-button',\r\n      bodyBackground: '#fff7e6'\r\n    },\r\n    dark: {\r\n      buttonStyle: 'dark-theme-button',\r\n      bodyBackground: '#C0C0C0'\r\n    },\r\n    colorful: {\r\n      buttonStyle: 'colorful-theme-button',\r\n      bodyBackground: '#78428a'\r\n    }\r\n  }\r\n\r\n  const getValidTheme = (theme) => {\r\n    return Object.keys(themes).includes(theme) ? theme : defaultTheme;\r\n  }\r\n\r\n  useEffect( () => {\r\n    fetchGetSession()\r\n    .then( response => {\r\n      let userInfo = response['data'];\r\n      setUserState({\r\n        ...userInfo, isLoggedIn: true, theme: getValidTheme(userInfo.theme)\r\n      });\r\n      setBodyColor(userInfo.theme);\r\n      setError(\"\");\r\n    })\r\n    .catch( (err) => {\r\n       setError(statusMessages[err.message || 'DEFAULT']);\r\n    });\r\n  }, []);\r\n\r\n  useEffect( () => {\r\n    if(userState.isLoggedIn) {\r\n      fetchReadAllTasks(userState.username)\r\n      .then( response => {\r\n        setTodos(Object.values(response['data']));\r\n        setError(\"\");\r\n      })\r\n      .catch( (err) => {\r\n        setError(statusMessages[err.message || 'DEFAULT']);\r\n      });\r\n    }\r\n  }, [userState]);\r\n\r\n  const login = (userInfo) => {\r\n    setUserState({\r\n      ...userInfo, isLoggedIn: true, theme: getValidTheme(userInfo.theme)\r\n    });\r\n    setBodyColor(userInfo.theme);\r\n    setError(\"\");\r\n  };\r\n\r\n  const logout = () => {\r\n    setUserState({\r\n      isLoggedIn: false, theme: defaultTheme\r\n    });\r\n    setBodyColor(defaultTheme);\r\n    setError(\"\");\r\n  };\r\n\r\n  const refreshTodos = (todos) => {\r\n    setTodos(todos);\r\n    setError(\"\");\r\n  }\r\n\r\n  const onAddSuccess = (todo) => {\r\n    setTodos([...todos, todo]);\r\n    setError(\"\");\r\n  };\r\n\r\n  const onDeleteSuccess = (deletedTodo) => {\r\n    const newTodos = todos.filter(todo => todo.taskId !== deletedTodo.taskId);\r\n    setTodos(newTodos);\r\n    setError(\"\");\r\n  }\r\n\r\n  const onError = (error) => {\r\n    setError(error);\r\n  };\r\n\r\n  const refreshTheme = (theme) => {\r\n    setUserState({\r\n      ...userState, theme: theme\r\n    });\r\n    setBodyColor(theme);\r\n  }\r\n\r\n  const setBodyColor = (theme) => {\r\n    document.body.style.backgroundColor = themes[theme]['bodyBackground'];\r\n  }\r\n\r\n  let content;\r\n  if(userState.isLoggedIn) {\r\n    content =\r\n       <div>\r\n          <Themes user={userState} onError={onError}/>\r\n          <Logout user={userState} onLogout={logout} />\r\n          <div className=\"error\">{error}</div>\r\n          <AddTodo user={userState} onAddSuccess={onAddSuccess} onAddError={onError} />\r\n          <Todos user={userState} todos={todos} refreshTodos={refreshTodos} onError={onError} />\r\n      </div>\r\n  } else {\r\n      content = <Login onLogin={login} />\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <ThemeContext.Provider value={  {theme: userState.theme, themes, refreshTheme} }>\r\n        <AppTitle />\r\n        {content}\r\n      </ThemeContext.Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}